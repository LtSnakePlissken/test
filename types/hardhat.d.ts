/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ElkERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkERC20__factory>;
    getContractFactory(
      name: "ElkPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkPair__factory>;
    getContractFactory(
      name: "IElkCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkCallee__factory>;
    getContractFactory(
      name: "IElkERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkERC20__factory>;
    getContractFactory(
      name: "IElkFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkFactory__factory>;
    getContractFactory(
      name: "IElkPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkPair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IElkRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkRouter__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IWAVAX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWAVAX__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ElkDexOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkDexOracle__factory>;
    getContractFactory(
      name: "ElkV2FarmFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkV2FarmFactory__factory>;
    getContractFactory(
      name: "ElkV2FarmingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkV2FarmingRewards__factory>;
    getContractFactory(
      name: "ElkV2FarmingRewardsPermissioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkV2FarmingRewardsPermissioned__factory>;
    getContractFactory(
      name: "ElkV2FarmManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkV2FarmManager__factory>;
    getContractFactory(
      name: "IElkDexOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkDexOracle__factory>;
    getContractFactory(
      name: "IElkERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkERC20__factory>;
    getContractFactory(
      name: "IElkFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkFactory__factory>;
    getContractFactory(
      name: "IElkPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkPair__factory>;
    getContractFactory(
      name: "IElkV2FarmFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkV2FarmFactory__factory>;
    getContractFactory(
      name: "IElkV2FarmingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkV2FarmingRewards__factory>;
    getContractFactory(
      name: "IElkV2FarmingRewardsPermissioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkV2FarmingRewardsPermissioned__factory>;
    getContractFactory(
      name: "IElkV2FarmManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElkV2FarmManager__factory>;
    getContractFactory(
      name: "IStakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeFactory__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "IStakingFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingFee__factory>;
    getContractFactory(
      name: "IStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingRewards__factory>;
    getContractFactory(
      name: "StakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeFactory__factory>;
    getContractFactory(
      name: "StakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeManager__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "StakingFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingFee__factory>;
    getContractFactory(
      name: "StakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewards__factory>;
    getContractFactory(
      name: "ElkFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkFactory__factory>;
    getContractFactory(
      name: "ElkRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElkRouter__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;

    getContractAt(
      name: "ElkERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkERC20>;
    getContractAt(
      name: "ElkPair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkPair>;
    getContractAt(
      name: "IElkCallee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkCallee>;
    getContractAt(
      name: "IElkERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkERC20>;
    getContractAt(
      name: "IElkFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkFactory>;
    getContractAt(
      name: "IElkPair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkPair>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IElkRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkRouter>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IWAVAX",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWAVAX>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ElkDexOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkDexOracle>;
    getContractAt(
      name: "ElkV2FarmFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkV2FarmFactory>;
    getContractAt(
      name: "ElkV2FarmingRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkV2FarmingRewards>;
    getContractAt(
      name: "ElkV2FarmingRewardsPermissioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkV2FarmingRewardsPermissioned>;
    getContractAt(
      name: "ElkV2FarmManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkV2FarmManager>;
    getContractAt(
      name: "IElkDexOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkDexOracle>;
    getContractAt(
      name: "IElkERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkERC20>;
    getContractAt(
      name: "IElkFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkFactory>;
    getContractAt(
      name: "IElkPair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkPair>;
    getContractAt(
      name: "IElkV2FarmFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkV2FarmFactory>;
    getContractAt(
      name: "IElkV2FarmingRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkV2FarmingRewards>;
    getContractAt(
      name: "IElkV2FarmingRewardsPermissioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkV2FarmingRewardsPermissioned>;
    getContractAt(
      name: "IElkV2FarmManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IElkV2FarmManager>;
    getContractAt(
      name: "IStakeFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeFactory>;
    getContractAt(
      name: "IStakeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "IStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "IStakingFee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingFee>;
    getContractAt(
      name: "IStakingRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingRewards>;
    getContractAt(
      name: "StakeFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeFactory>;
    getContractAt(
      name: "StakeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeManager>;
    getContractAt(
      name: "Staking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "StakingFee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingFee>;
    getContractAt(
      name: "StakingRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewards>;
    getContractAt(
      name: "ElkFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkFactory>;
    getContractAt(
      name: "ElkRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElkRouter>;
    getContractAt(
      name: "TestERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;

    deployContract(
      name: "ElkERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkERC20>;
    deployContract(
      name: "ElkPair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkPair>;
    deployContract(
      name: "IElkCallee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkCallee>;
    deployContract(
      name: "IElkERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkERC20>;
    deployContract(
      name: "IElkFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkFactory>;
    deployContract(
      name: "IElkPair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkPair>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IElkRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkRouter>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWAVAX",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWAVAX>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ElkDexOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkDexOracle>;
    deployContract(
      name: "ElkV2FarmFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmFactory>;
    deployContract(
      name: "ElkV2FarmingRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmingRewards>;
    deployContract(
      name: "ElkV2FarmingRewardsPermissioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmingRewardsPermissioned>;
    deployContract(
      name: "ElkV2FarmManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmManager>;
    deployContract(
      name: "IElkDexOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkDexOracle>;
    deployContract(
      name: "IElkERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkERC20>;
    deployContract(
      name: "IElkFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkFactory>;
    deployContract(
      name: "IElkPair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkPair>;
    deployContract(
      name: "IElkV2FarmFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmFactory>;
    deployContract(
      name: "IElkV2FarmingRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmingRewards>;
    deployContract(
      name: "IElkV2FarmingRewardsPermissioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmingRewardsPermissioned>;
    deployContract(
      name: "IElkV2FarmManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmManager>;
    deployContract(
      name: "IStakeFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeFactory>;
    deployContract(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaking>;
    deployContract(
      name: "IStakingFee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingFee>;
    deployContract(
      name: "IStakingRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingRewards>;
    deployContract(
      name: "StakeFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeFactory>;
    deployContract(
      name: "StakeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeManager>;
    deployContract(
      name: "Staking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Staking>;
    deployContract(
      name: "StakingFee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingFee>;
    deployContract(
      name: "StakingRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingRewards>;
    deployContract(
      name: "ElkFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkFactory>;
    deployContract(
      name: "ElkRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkRouter>;
    deployContract(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;

    deployContract(
      name: "ElkERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkERC20>;
    deployContract(
      name: "ElkPair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkPair>;
    deployContract(
      name: "IElkCallee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkCallee>;
    deployContract(
      name: "IElkERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkERC20>;
    deployContract(
      name: "IElkFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkFactory>;
    deployContract(
      name: "IElkPair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkPair>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IElkRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkRouter>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWAVAX",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWAVAX>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ElkDexOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkDexOracle>;
    deployContract(
      name: "ElkV2FarmFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmFactory>;
    deployContract(
      name: "ElkV2FarmingRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmingRewards>;
    deployContract(
      name: "ElkV2FarmingRewardsPermissioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmingRewardsPermissioned>;
    deployContract(
      name: "ElkV2FarmManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkV2FarmManager>;
    deployContract(
      name: "IElkDexOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkDexOracle>;
    deployContract(
      name: "IElkERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkERC20>;
    deployContract(
      name: "IElkFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkFactory>;
    deployContract(
      name: "IElkPair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkPair>;
    deployContract(
      name: "IElkV2FarmFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmFactory>;
    deployContract(
      name: "IElkV2FarmingRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmingRewards>;
    deployContract(
      name: "IElkV2FarmingRewardsPermissioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmingRewardsPermissioned>;
    deployContract(
      name: "IElkV2FarmManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IElkV2FarmManager>;
    deployContract(
      name: "IStakeFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeFactory>;
    deployContract(
      name: "IStakeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "IStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaking>;
    deployContract(
      name: "IStakingFee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingFee>;
    deployContract(
      name: "IStakingRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingRewards>;
    deployContract(
      name: "StakeFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeFactory>;
    deployContract(
      name: "StakeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeManager>;
    deployContract(
      name: "Staking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Staking>;
    deployContract(
      name: "StakingFee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingFee>;
    deployContract(
      name: "StakingRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingRewards>;
    deployContract(
      name: "ElkFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkFactory>;
    deployContract(
      name: "ElkRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElkRouter>;
    deployContract(
      name: "TestERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
