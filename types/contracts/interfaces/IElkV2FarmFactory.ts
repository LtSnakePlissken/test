/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface IElkV2FarmFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allFarms"
      | "allFarmsLength"
      | "createNewPermissonedRewards"
      | "createNewRewards"
      | "farmManager"
      | "fee"
      | "feeToken"
      | "getCreator"
      | "getFarm"
      | "getPermissionedFarm"
      | "isFarm"
      | "isPermissionedFarm"
      | "maxFee"
      | "overrideOwnership"
      | "setFee"
      | "setManager"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractCreated"
      | "FeeSet"
      | "FeesRecovered"
      | "ManagerSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allFarms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allFarmsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNewPermissonedRewards",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewRewards",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "farmManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFarm",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionedFarm",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isFarm", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isPermissionedFarm",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "maxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "overrideOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allFarms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allFarmsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewPermissonedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionedFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionedFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overrideOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ContractCreatedEvent {
  export type InputTuple = [_newContract: AddressLike];
  export type OutputTuple = [_newContract: string];
  export interface OutputObject {
    _newContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeSetEvent {
  export type InputTuple = [_newFee: BigNumberish];
  export type OutputTuple = [_newFee: bigint];
  export interface OutputObject {
    _newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesRecoveredEvent {
  export type InputTuple = [_balanceRecovered: BigNumberish];
  export type OutputTuple = [_balanceRecovered: bigint];
  export interface OutputObject {
    _balanceRecovered: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerSetEvent {
  export type InputTuple = [_farmManager: AddressLike];
  export type OutputTuple = [_farmManager: string];
  export interface OutputObject {
    _farmManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IElkV2FarmFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IElkV2FarmFactory;
  waitForDeployment(): Promise<this>;

  interface: IElkV2FarmFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allFarms: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  allFarmsLength: TypedContractMethod<[], [bigint], "view">;

  createNewPermissonedRewards: TypedContractMethod<
    [
      _oracleAddress: AddressLike,
      _lpTokenAddress: AddressLike,
      _coverageTokenAddress: AddressLike,
      _coverageAmount: BigNumberish,
      _coverageVestingDuration: BigNumberish,
      _rewardTokenAddresses: AddressLike[],
      _rewardsDuration: BigNumberish,
      _depositFeeBps: BigNumberish,
      _withdrawalFeesBps: BigNumberish[],
      _withdrawalFeeSchedule: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  createNewRewards: TypedContractMethod<
    [
      _oracleAddress: AddressLike,
      _lpTokenAddress: AddressLike,
      _coverageTokenAddress: AddressLike,
      _coverageAmount: BigNumberish,
      _coverageVestingDuration: BigNumberish,
      _rewardTokenAddresses: AddressLike[],
      _rewardsDuration: BigNumberish,
      _depositFeeBps: BigNumberish,
      _withdrawalFeesBps: BigNumberish[],
      _withdrawalFeeSchedule: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  farmManager: TypedContractMethod<[], [string], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  feeToken: TypedContractMethod<[], [string], "view">;

  getCreator: TypedContractMethod<
    [_farmAddress: AddressLike],
    [string],
    "view"
  >;

  getFarm: TypedContractMethod<
    [_creator: AddressLike, _lpTokenAddress: AddressLike],
    [string],
    "view"
  >;

  getPermissionedFarm: TypedContractMethod<
    [_creator: AddressLike, _lpTokenAddress: AddressLike],
    [string],
    "view"
  >;

  isFarm: TypedContractMethod<[_farmAddress: AddressLike], [boolean], "view">;

  isPermissionedFarm: TypedContractMethod<
    [_farmAddress: AddressLike],
    [boolean],
    "view"
  >;

  maxFee: TypedContractMethod<[], [bigint], "view">;

  overrideOwnership: TypedContractMethod<
    [_farmAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;

  setManager: TypedContractMethod<
    [_managerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allFarms"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allFarmsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createNewPermissonedRewards"
  ): TypedContractMethod<
    [
      _oracleAddress: AddressLike,
      _lpTokenAddress: AddressLike,
      _coverageTokenAddress: AddressLike,
      _coverageAmount: BigNumberish,
      _coverageVestingDuration: BigNumberish,
      _rewardTokenAddresses: AddressLike[],
      _rewardsDuration: BigNumberish,
      _depositFeeBps: BigNumberish,
      _withdrawalFeesBps: BigNumberish[],
      _withdrawalFeeSchedule: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createNewRewards"
  ): TypedContractMethod<
    [
      _oracleAddress: AddressLike,
      _lpTokenAddress: AddressLike,
      _coverageTokenAddress: AddressLike,
      _coverageAmount: BigNumberish,
      _coverageVestingDuration: BigNumberish,
      _rewardTokenAddresses: AddressLike[],
      _rewardsDuration: BigNumberish,
      _depositFeeBps: BigNumberish,
      _withdrawalFeesBps: BigNumberish[],
      _withdrawalFeeSchedule: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "farmManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCreator"
  ): TypedContractMethod<[_farmAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFarm"
  ): TypedContractMethod<
    [_creator: AddressLike, _lpTokenAddress: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionedFarm"
  ): TypedContractMethod<
    [_creator: AddressLike, _lpTokenAddress: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFarm"
  ): TypedContractMethod<[_farmAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPermissionedFarm"
  ): TypedContractMethod<[_farmAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "overrideOwnership"
  ): TypedContractMethod<[_farmAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<[_managerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ContractCreated"
  ): TypedContractEvent<
    ContractCreatedEvent.InputTuple,
    ContractCreatedEvent.OutputTuple,
    ContractCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeSet"
  ): TypedContractEvent<
    FeeSetEvent.InputTuple,
    FeeSetEvent.OutputTuple,
    FeeSetEvent.OutputObject
  >;
  getEvent(
    key: "FeesRecovered"
  ): TypedContractEvent<
    FeesRecoveredEvent.InputTuple,
    FeesRecoveredEvent.OutputTuple,
    FeesRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "ManagerSet"
  ): TypedContractEvent<
    ManagerSetEvent.InputTuple,
    ManagerSetEvent.OutputTuple,
    ManagerSetEvent.OutputObject
  >;

  filters: {
    "ContractCreated(address)": TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
    ContractCreated: TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;

    "FeeSet(uint256)": TypedContractEvent<
      FeeSetEvent.InputTuple,
      FeeSetEvent.OutputTuple,
      FeeSetEvent.OutputObject
    >;
    FeeSet: TypedContractEvent<
      FeeSetEvent.InputTuple,
      FeeSetEvent.OutputTuple,
      FeeSetEvent.OutputObject
    >;

    "FeesRecovered(uint256)": TypedContractEvent<
      FeesRecoveredEvent.InputTuple,
      FeesRecoveredEvent.OutputTuple,
      FeesRecoveredEvent.OutputObject
    >;
    FeesRecovered: TypedContractEvent<
      FeesRecoveredEvent.InputTuple,
      FeesRecoveredEvent.OutputTuple,
      FeesRecoveredEvent.OutputObject
    >;

    "ManagerSet(address)": TypedContractEvent<
      ManagerSetEvent.InputTuple,
      ManagerSetEvent.OutputTuple,
      ManagerSetEvent.OutputObject
    >;
    ManagerSet: TypedContractEvent<
      ManagerSetEvent.InputTuple,
      ManagerSetEvent.OutputTuple,
      ManagerSetEvent.OutputObject
    >;
  };
}
