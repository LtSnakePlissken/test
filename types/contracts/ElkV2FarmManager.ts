/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface ElkV2FarmManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRewardToken"
      | "farmFactory"
      | "lastStarted"
      | "minDelayBeforeStop"
      | "multiClaim"
      | "owner"
      | "recoverERC20"
      | "recoverFees"
      | "recoverLeftoverCoverage"
      | "recoverLeftoverReward"
      | "renounceOwnership"
      | "setAddressPermission"
      | "setFarmFactory"
      | "setMinDelayBeforeStop"
      | "startEmission"
      | "startEmissionWithCoverage"
      | "stopEmission"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FarmFactorySet"
      | "OwnershipTransferred"
      | "RewardsReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "farmFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastStarted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDelayBeforeStop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiClaim",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverLeftoverCoverage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverLeftoverReward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressPermission",
    values: [AddressLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDelayBeforeStop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startEmission",
    values: [AddressLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startEmissionWithCoverage",
    values: [AddressLike, BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopEmission",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDelayBeforeStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverLeftoverCoverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverLeftoverReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFarmFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDelayBeforeStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startEmissionWithCoverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FarmFactorySetEvent {
  export type InputTuple = [factoryAddress: AddressLike];
  export type OutputTuple = [factoryAddress: string];
  export interface OutputObject {
    factoryAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsReceivedEvent {
  export type InputTuple = [farm: AddressLike];
  export type OutputTuple = [farm: string];
  export interface OutputObject {
    farm: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ElkV2FarmManager extends BaseContract {
  connect(runner?: ContractRunner | null): ElkV2FarmManager;
  waitForDeployment(): Promise<this>;

  interface: ElkV2FarmManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRewardToken: TypedContractMethod<
    [_farmAddress: AddressLike, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  farmFactory: TypedContractMethod<[], [string], "view">;

  lastStarted: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  minDelayBeforeStop: TypedContractMethod<[], [bigint], "view">;

  multiClaim: TypedContractMethod<
    [_farms: AddressLike[]],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recoverERC20: TypedContractMethod<
    [
      _farmAddress: AddressLike,
      _tokenAddress: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  recoverFees: TypedContractMethod<
    [_farmAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverLeftoverCoverage: TypedContractMethod<
    [_farmAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverLeftoverReward: TypedContractMethod<
    [_farmAddress: AddressLike, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAddressPermission: TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _permission: boolean,
      _permissionedFarmAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setFarmFactory: TypedContractMethod<
    [_factoryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinDelayBeforeStop: TypedContractMethod<
    [_delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  startEmission: TypedContractMethod<
    [
      _farmAddress: AddressLike,
      _rewards: BigNumberish[],
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  startEmissionWithCoverage: TypedContractMethod<
    [
      _farmAddress: AddressLike,
      _rewards: BigNumberish[],
      _coverage: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  stopEmission: TypedContractMethod<
    [_farmAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRewardToken"
  ): TypedContractMethod<
    [_farmAddress: AddressLike, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "farmFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastStarted"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDelayBeforeStop"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multiClaim"
  ): TypedContractMethod<[_farms: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [
      _farmAddress: AddressLike,
      _tokenAddress: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverFees"
  ): TypedContractMethod<[_farmAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverLeftoverCoverage"
  ): TypedContractMethod<[_farmAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverLeftoverReward"
  ): TypedContractMethod<
    [_farmAddress: AddressLike, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddressPermission"
  ): TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _permission: boolean,
      _permissionedFarmAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFarmFactory"
  ): TypedContractMethod<[_factoryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinDelayBeforeStop"
  ): TypedContractMethod<[_delay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startEmission"
  ): TypedContractMethod<
    [
      _farmAddress: AddressLike,
      _rewards: BigNumberish[],
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startEmissionWithCoverage"
  ): TypedContractMethod<
    [
      _farmAddress: AddressLike,
      _rewards: BigNumberish[],
      _coverage: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stopEmission"
  ): TypedContractMethod<[_farmAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FarmFactorySet"
  ): TypedContractEvent<
    FarmFactorySetEvent.InputTuple,
    FarmFactorySetEvent.OutputTuple,
    FarmFactorySetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardsReceived"
  ): TypedContractEvent<
    RewardsReceivedEvent.InputTuple,
    RewardsReceivedEvent.OutputTuple,
    RewardsReceivedEvent.OutputObject
  >;

  filters: {
    "FarmFactorySet(address)": TypedContractEvent<
      FarmFactorySetEvent.InputTuple,
      FarmFactorySetEvent.OutputTuple,
      FarmFactorySetEvent.OutputObject
    >;
    FarmFactorySet: TypedContractEvent<
      FarmFactorySetEvent.InputTuple,
      FarmFactorySetEvent.OutputTuple,
      FarmFactorySetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardsReceived(address)": TypedContractEvent<
      RewardsReceivedEvent.InputTuple,
      RewardsReceivedEvent.OutputTuple,
      RewardsReceivedEvent.OutputObject
    >;
    RewardsReceived: TypedContractEvent<
      RewardsReceivedEvent.InputTuple,
      RewardsReceivedEvent.OutputTuple,
      RewardsReceivedEvent.OutputObject
    >;
  };
}
