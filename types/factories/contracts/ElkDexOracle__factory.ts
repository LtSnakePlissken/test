/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../common";
import type {
  ElkDexOracle,
  ElkDexOracleInterface,
} from "../../contracts/ElkDexOracle";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_windowSize",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_granularity",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
    ],
    name: "consult",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
    ],
    name: "consultWeth",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "granularity",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "observationIndexOf",
    outputs: [
      {
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "pairObservations",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price0Cumulative",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price1Cumulative",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "update",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "updateWeth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "windowSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61012060405234801561001157600080fd5b506040516110713803806110718339818101604052608081101561003457600080fd5b50805160208201516040830151606090930151919290916001600160a01b0384161580159061006b57506001600160a01b03831615155b6100bc576040805162461bcd60e51b815260206004820152601a60248201527f456c6b4465784f7261636c653a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b60018160ff1611610114576040805162461bcd60e51b815260206004820152601960248201527f456c6b4465784f7261636c653a204752414e554c415249545900000000000000604482015290519081900360640190fd5b8160ff821680828161012257fe5b0461010081905202146101665760405162461bcd60e51b81526004018080602001828103825260298152602001806110486029913960400191505060405180910390fd5b6001600160601b0319606094851b81166080529290931b90911660a05260c0527fff0000000000000000000000000000000000000000000000000000000000000060f89190911b1660e05260805160601c60a05160601c60c05160e05160f81c61010051610e0961023f600039806103bb52806106c3528061071752806107775250806102b05280610620528061074352806108665250806102d4528061035c52806103df52508061032052806104e552806105db5250806102325280610263528061028c528061050952806105455250610e096000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c80631421f7301461009e5780631b5ad801146100dc5780633fc8cef314610104578063556f0dc7146101285780638a14117a146101465780638c86f1e41461014e578063bfcc8e4214610184578063c45a0155146101ce578063c640752d146101d6578063dbaad32f14610204578063e4463eb214610221575b600080fd5b6100ca600480360360408110156100b457600080fd5b506001600160a01b038135169060200135610229565b60408051918252519081900360200190f35b610102600480360360208110156100f257600080fd5b50356001600160a01b031661025d565b005b61010c61028a565b604080516001600160a01b039092168252519081900360200190f35b6101306102ae565b6040805160ff9092168252519081900360200190f35b6100ca6102d2565b6100ca6004803603606081101561016457600080fd5b506001600160a01b038135811691602081013591604090910135166102f6565b6101b06004803603604081101561019a57600080fd5b506001600160a01b0381351690602001356104a4565b60408051938452602084019290925282820152519081900360600190f35b61010c6104e3565b610102600480360360408110156101ec57600080fd5b506001600160a01b0381358116916020013516610507565b6101306004803603602081101561021a57600080fd5b5035610712565b6100ca610775565b600061025683837f00000000000000000000000000000000000000000000000000000000000000006102f6565b9392505050565b610287817f0000000000000000000000000000000000000000000000000000000000000000610507565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816001600160a01b0316846001600160a01b03161415610319575081610256565b60006103467f00000000000000000000000000000000000000000000000000000000000000008685610799565b9050600061035382610854565b805490915042037f00000000000000000000000000000000000000000000000000000000000000008111156103b95760405162461bcd60e51b815260040180806020018281038252602c815260200180610d62602c913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006002027f00000000000000000000000000000000000000000000000000000000000000000381101561043d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610d8e6025913960400191505060405180910390fd5b600080610449856108e2565b5091509150600061045a8a89610ab1565b509050896001600160a01b0316816001600160a01b0316141561049457610487856001015484868c610ba0565b9650505050505050610256565b610487856002015483868c610ba0565b600060205281600052604060002081815481106104bd57fe5b600091825260209091206003909102018054600182015460029092015490935090915083565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614801561057957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316145b156105835761070e565b806001600160a01b0316826001600160a01b031614156105d45760405162461bcd60e51b8152600401808060200182810382526021815260200180610db36021913960400191505060405180910390fd5b60006106017f00000000000000000000000000000000000000000000000000000000000000008484610799565b6001600160a01b0381166000908152602081905260409020549091505b7f000000000000000000000000000000000000000000000000000000000000000060ff16811015610672576001600160a01b038216600090815260208190526040812080546001908101825591520161061e565b50600061067e42610712565b6001600160a01b03831660009081526020819052604081208054929350909160ff84169081106106aa57fe5b60009182526020909120600390910201805490915042037f0000000000000000000000000000000000000000000000000000000000000000811115610709576000806106f5866108e2565b504286556001860191909155600285015550505b505050505b5050565b6000807f0000000000000000000000000000000000000000000000000000000000000000838161073e57fe5b0490507f000000000000000000000000000000000000000000000000000000000000000060ff16818161076d57fe5b069392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006107a88585610ab1565b604080516001600160601b0319606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501206001600160f81b031960688401529a90941b9093166069840152607d8301989098527f33c4831a098654d3d20a78641a198ee6ffc1ceed49f2196b75bb244891c260e3609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60008061086042610712565b905060007f000000000000000000000000000000000000000000000000000000000000000060ff168260010160ff168161089657fe5b069050600080856001600160a01b03166001600160a01b031681526020019081526020016000208160ff16815481106108cb57fe5b906000526020600020906003020192505050919050565b60008060006108ef610bf3565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561092a57600080fd5b505afa15801561093e573d6000803e3d6000fd5b505050506040513d602081101561095457600080fd5b505160408051635a3d549360e01b815290519194506001600160a01b03861691635a3d549391600480820192602092909190829003018186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d60208110156109c457600080fd5b505160408051630240bc6b60e21b81529051919350600091829182916001600160a01b03891691630902f1ac916004808301926060929190829003018186803b158015610a1057600080fd5b505afa158015610a24573d6000803e3d6000fd5b505050506040513d6060811015610a3a57600080fd5b5080516020820151604090920151909450909250905063ffffffff80821690851614610aa75780840363ffffffff8116610a748486610bfd565b516001600160e01b031602969096019563ffffffff8116610a958585610bfd565b516001600160e01b0316029590950194505b5050509193909250565b600080826001600160a01b0316846001600160a01b03161415610b1b576040805162461bcd60e51b815260206004820152601f60248201527f456c6b4c6962726172793a204944454e544943414c5f41444452455353455300604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610b3b578284610b3e565b83835b90925090506001600160a01b038216610b99576040805162461bcd60e51b8152602060048201526018602482015277456c6b4c6962726172793a205a45524f5f4144445245535360401b604482015290519081900360640190fd5b9250929050565b6000610baa610d3c565b60405180602001604052808588880381610bc057fe5b046001600160e01b031690529050610be0610bdb8285610ca6565b610d35565b6001600160901b03169695505050505050565b63ffffffff421690565b610c05610d3c565b6000826001600160701b031611610c63576040805162461bcd60e51b815260206004820181905260248201527f4669786564506f696e743a204449565f42595f5a45524f5f4652414354494f4e604482015290519081900360640190fd5b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b1681610c9157fe5b046001600160e01b0316815250905092915050565b610cae610d4e565b6000821580610cd457505082516001600160e01b031682810290838281610cd157fe5b04145b610d20576040805162461bcd60e51b81526020600482015260186024820152774669786564506f696e743a204d554c5f4f564552464c4f5760401b604482015290519081900360640190fd5b60408051602081019091529081529392505050565b5160701c90565b60408051602081019091526000815290565b604051806020016040528060008152509056fe456c6b4465784f7261636c653a204d495353494e475f484953544f524943414c5f4f42534552564154494f4e456c6b4465784f7261636c653a20554e45585045435445445f54494d455f454c4150534544456c6b4465784f7261636c653a204944454e544943414c5f414444524553534553a26469706673582212203e80217ab83b859d4538dd91f447544fbe84033fd691d2925ede0ef49bccd24e64736f6c63430006060033456c6b4465784f7261636c653a2057494e444f575f4e4f545f4556454e4c595f444956495349424c45";

type ElkDexOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ElkDexOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ElkDexOracle__factory extends ContractFactory {
  constructor(...args: ElkDexOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _weth: AddressLike,
    _factory: AddressLike,
    _windowSize: BigNumberish,
    _granularity: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _weth,
      _factory,
      _windowSize,
      _granularity,
      overrides || {}
    );
  }
  override deploy(
    _weth: AddressLike,
    _factory: AddressLike,
    _windowSize: BigNumberish,
    _granularity: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _weth,
      _factory,
      _windowSize,
      _granularity,
      overrides || {}
    ) as Promise<
      ElkDexOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ElkDexOracle__factory {
    return super.connect(runner) as ElkDexOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ElkDexOracleInterface {
    return new Interface(_abi) as ElkDexOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ElkDexOracle {
    return new Contract(address, _abi, runner) as unknown as ElkDexOracle;
  }
}
